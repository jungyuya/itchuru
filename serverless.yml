service: news-app

frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.12
  region: ap-northeast-2
  stage: dev

  environment:
    GOOGLE_API_KEY: "${ssm:/news-app/${self:provider.stage}/GOOGLE_API_KEY, true}"
    NAVER_CLIENT_ID: "${ssm:/news-app/${self:provider.stage}/NAVER_CLIENT_ID, true}"
    NAVER_CLIENT_SECRET: "${ssm:/news-app/${self:provider.stage}/NAVER_CLIENT_SECRET, true}"
    NEWS_CACHE_TABLE_NAME: "news-app-cache-table-${self:provider.stage}"
    # AWS_REGION: ${self:provider.region} # <--- 이 줄이 반드시 삭제되어야 합니다. (provider 하위)

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: '*'
    layers:
      - { Ref: PythonLibsLambdaLayer }
    timeout: 30
    # environment: # <--- app 함수에 별도로 environment를 정의했다면 여기도 AWS_REGION 없어야 함.
      # (app 함수는 provider의 environment를 기본적으로 상속받으므로, 일반적으로 여기에 AWS_REGION을 다시 정의할 필요는 없습니다.)


  refreshNewsCache:
    handler: app.refresh_news_cache_handler
    events:
      - schedule:
          rate: rate(1 hour)
    timeout: 60
    layers:
      - { Ref: PythonLibsLambdaLayer }
    environment:
      NEWS_CACHE_TABLE_NAME: ${self:provider.environment.NEWS_CACHE_TABLE_NAME}
      NAVER_CLIENT_ID: ${self:provider.environment.NAVER_CLIENT_ID}
      NAVER_CLIENT_SECRET: ${self:provider.environment.NAVER_CLIENT_SECRET}

layers:
  PythonLibs:
    path: ./python
    name: ${self:service}-${self:provider.stage}-python-libs
    description: Heavy Python libraries for Python 3.12
    compatibleRuntimes:
      - python3.12

plugins:
  - serverless-wsgi
  - serverless-python-requirements

custom:
  wsgi:
    app: app.app
    packRequirements: false

  pythonRequirements:
    dockerizePip: non-linux
    slim: true

  httpApi:
    cors:
      allowedOrigins: ['*']
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true

resources:
  Resources:
    NewsCacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NEWS_CACHE_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true